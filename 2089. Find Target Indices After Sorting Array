class Solution {
    
    private:
    int firstPos(vector<int>& nums, int target)
    {
        int start = 0, end = nums.size() - 1;
        int res = -1;
        int mid = start + (end - start)/2;
        
        while(start <= end)
        {
            if(nums[mid] == target)
            {
                res = mid;
                end = mid -1;
            }
            else if(nums[mid] > target)
            {
                end = mid - 1;
            }
            else
            {
                start = mid + 1;
            }
            mid = start + (end - start)/2;
        }
        return res;
    }
    
        int lastPos(vector<int>& nums, int target)
    {
        int start = 0, end = nums.size() - 1;
        int res = -1;
        int mid = start + (end - start)/2;
        
        while(start <= end)
        {
            if(nums[mid] == target)
            {
                res = mid;
                start = mid + 1;
            }
            else if(nums[mid] > target)
            {
                end = mid - 1;
            }
            else
            {
                start = mid + 1;
            }
            mid = start + (end - start)/2;
        }
        return res;
    }
    
public:
    vector<int> targetIndices(vector<int>& nums, int target) {
//        Brute Force Approach

//         vector<int> ans;
//         sort(nums.begin(), nums.end());
        
//         for(int i = 0; i < nums.size(); i++)
//         {
//             if(nums[i] == target)
//                 ans.push_back(i);
//         }
//         return ans;
        sort(nums.begin(), nums.end());
        vector<int> ans;
        
        int i = firstPos(nums, target);
        int j = lastPos(nums, target);
        
        if(i == -1 and j == -1)
        {
            return {};
        }
        else
        {
            for(int s = i; s <= j; s++)
        {
                ans.push_back(s);
        }
        }
        
        return ans;
    }
};
