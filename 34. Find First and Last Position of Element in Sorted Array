class Solution {
    private:
    
int firstPosition(vector<int>& arr, int key) {

    int s = 0, e = arr.size()-1;
    int mid = s + (e-s)/2;
    int ans = -1;
    while(s<=e) {

        if(arr[mid] == key){
            ans = mid;
            e = mid - 1;
        }
        else if(key > arr[mid]) {
            s = mid + 1;
        }
        else if(key < arr[mid]) {
            e = mid - 1;
        }

        mid = s + (e-s)/2;
    }
    return ans;
}

int lastPosition(vector<int>& arr, int key) {

    int s = 0, e = arr.size()-1;
    int mid = s + (e-s)/2;
    int ans = -1;
    while(s<=e) {

        if(arr[mid] == key){
            ans = mid;
            s = mid + 1;
        }
        else if(key > arr[mid]) {
            s = mid + 1;
        }
        else if(key < arr[mid]) {
            e = mid - 1;
        }

        mid = s + (e-s)/2;
    }
    return ans;
}
    
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        
        vector<int> ans;
        ans.push_back(firstPosition(nums, target));
        ans.push_back(lastPosition(nums, target));
        
        return ans;
        
    }
};
